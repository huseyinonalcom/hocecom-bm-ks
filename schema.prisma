// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Accountancy {
  id          String    @id @default(cuid())
  name        String    @default("")
  isActive    Boolean   @default(false)
  logo        File?     @relation("Accountancy_logo", fields: [logoId], references: [id])
  logoId      String?   @map("logo")
  companies   Company[] @relation("Company_accountancy")
  users       User[]    @relation("User_accountancy")
  extraFields Json?

  @@index([logoId])
}

model Address {
  id                         String          @id @default(cuid())
  street                     String          @default("")
  door                       String          @default("")
  zip                        String          @default("")
  city                       String          @default("")
  floor                      String          @default("")
  province                   String          @default("")
  country                    String          @default("")
  customer                   User?           @relation("Address_customer", fields: [customerId], references: [id])
  customerId                 String?         @map("customer")
  company                    Company?        @relation("Address_company", fields: [companyId], references: [id])
  companyId                  String?         @map("company")
  extraFields                Json?
  from_Document_delAddress   Document[]      @relation("Document_delAddress")
  from_Document_docAddress   Document[]      @relation("Document_docAddress")
  from_Establishment_address Establishment[] @relation("Establishment_address")
  from_Supplier_address      Supplier[]      @relation("Supplier_address")

  @@index([customerId])
  @@index([companyId])
}

model AssemblyComponent {
  id          String    @id @default(cuid())
  name        String    @default("")
  description String    @default("")
  amount      Int?
  assembly    Material? @relation("AssemblyComponent_assembly", fields: [assemblyId], references: [id])
  assemblyId  String?   @map("assembly")
  material    Material? @relation("AssemblyComponent_material", fields: [materialId], references: [id])
  materialId  String?   @map("material")
  company     Company?  @relation("AssemblyComponent_company", fields: [companyId], references: [id])
  companyId   String?   @map("company")
  extraFields Json?

  @@index([assemblyId])
  @@index([materialId])
  @@index([companyId])
}

model Brand {
  id          String     @id @default(cuid())
  name        String     @default("")
  materials   Material[] @relation("Material_brand")
  company     Company?   @relation("Brand_company", fields: [companyId], references: [id])
  companyId   String?    @map("company")
  extraFields Json?

  @@index([companyId])
}

model Company {
  id                              String               @id @default(cuid())
  name                            String               @default("")
  isActive                        Boolean              @default(false)
  logo                            File?                @relation("Company_logo", fields: [logoId], references: [id])
  logoId                          String?              @map("logo")
  pincode                         String               @unique @default("")
  owner                           User?                @relation("Company_owner", fields: [ownerId], references: [id])
  ownerId                         String?              @unique @map("owner")
  users                           User[]               @relation("User_company")
  establishments                  Establishment[]      @relation("Establishment_company")
  accountancy                     Accountancy?         @relation("Company_accountancy", fields: [accountancyId], references: [id])
  accountancyId                   String?              @map("accountancy")
  extraFields                     Json?
  emailUser                       String               @default("")
  emailPassword                   String               @default("")
  emailHost                       String               @default("")
  emailPort                       String               @default("")
  emailSec                        String               @default("")
  stripeSecretKey                 String               @default("")
  stripePublishableKey            String               @default("")
  bolClientID                     String               @default("")
  bolClientSecret                 String               @default("")
  amazonClientID                  String               @default("")
  amazonClientSecret              String               @default("")
  accountantEmail                 String               @default("")
  monthlyReports                  Boolean              @default(false)
  from_Address_company            Address[]            @relation("Address_company")
  from_AssemblyComponent_company  AssemblyComponent[]  @relation("AssemblyComponent_company")
  from_Brand_company              Brand[]              @relation("Brand_company")
  from_Document_company           Document[]           @relation("Document_company")
  from_DocumentProduct_company    DocumentProduct[]    @relation("DocumentProduct_company")
  from_File_company               File[]               @relation("File_company")
  from_Material_company           Material[]           @relation("Material_company")
  from_Note_company               Note[]               @relation("Note_company")
  from_Notification_company       Notification[]       @relation("Notification_company")
  from_Operation_company          Operation[]          @relation("Operation_company")
  from_Payment_company            Payment[]            @relation("Payment_company")
  from_ProductCollection_company  ProductCollection[]  @relation("ProductCollection_company")
  from_Shelf_company              Shelf[]              @relation("Shelf_company")
  from_ShelfStock_company         ShelfStock[]         @relation("ShelfStock_company")
  from_StockMovement_company      StockMovement[]      @relation("StockMovement_company")
  from_Supplier_company           Supplier[]           @relation("Supplier_company")
  from_Tag_company                Tag[]                @relation("Tag_company")
  from_WorkOrder_company          WorkOrder[]          @relation("WorkOrder_company")
  from_WorkOrderOperation_company WorkOrderOperation[] @relation("WorkOrderOperation_company")

  @@index([logoId])
  @@index([accountancyId])
}

model Document {
  id              String            @id @default(cuid())
  date            DateTime?         @default(now())
  deliveryDate    DateTime?
  createdAt       DateTime?         @default(now())
  type            String
  currency        String            @default("EUR")
  creator         User?             @relation("Document_creator", fields: [creatorId], references: [id])
  creatorId       String?           @map("creator")
  supplier        Supplier?         @relation("Document_supplier", fields: [supplierId], references: [id])
  supplierId      String?           @map("supplier")
  customer        User?             @relation("Document_customer", fields: [customerId], references: [id])
  customerId      String?           @map("customer")
  files           File[]            @relation("Document_files")
  isDeleted       Boolean           @default(false)
  fromDocument    Document?         @relation("Document_fromDocument", fields: [fromDocumentId], references: [id])
  fromDocumentId  String?           @unique @map("fromDocument")
  delAddress      Address?          @relation("Document_delAddress", fields: [delAddressId], references: [id])
  delAddressId    String?           @map("delAddress")
  docAddress      Address?          @relation("Document_docAddress", fields: [docAddressId], references: [id])
  docAddressId    String?           @map("docAddress")
  toDocument      Document?         @relation("Document_fromDocument")
  products        DocumentProduct[] @relation("DocumentProduct_document")
  payments        Payment[]         @relation("Document_payments")
  prefix          String            @default("")
  phase           Int?
  number          String            @default("")
  comments        String            @default("")
  references      String            @default("")
  managerNotes    String            @default("")
  establishment   Establishment?    @relation("Document_establishment", fields: [establishmentId], references: [id])
  establishmentId String?           @map("establishment")
  company         Company?          @relation("Document_company", fields: [companyId], references: [id])
  companyId       String?           @map("company")
  taxIncluded     Boolean           @default(true)
  extraFields     Json?

  @@index([creatorId])
  @@index([supplierId])
  @@index([customerId])
  @@index([delAddressId])
  @@index([docAddressId])
  @@index([establishmentId])
  @@index([companyId])
}

model DocumentProduct {
  id              String         @id @default(cuid())
  amount          Decimal        @postgresql.Decimal(18, 4)
  stockMovement   StockMovement? @relation("DocumentProduct_stockMovement", fields: [stockMovementId], references: [id])
  stockMovementId String?        @unique @map("stockMovement")
  product         Material?      @relation("DocumentProduct_product", fields: [productId], references: [id])
  productId       String?        @map("product")
  name            String         @default("")
  description     String         @default("")
  tax             Decimal        @postgresql.Decimal(18, 4)
  price           Decimal        @postgresql.Decimal(18, 4)
  reduction       Decimal?       @default("0") @postgresql.Decimal(18, 4)
  document        Document?      @relation("DocumentProduct_document", fields: [documentId], references: [id])
  documentId      String?        @map("document")
  company         Company?       @relation("DocumentProduct_company", fields: [companyId], references: [id])
  companyId       String?        @map("company")
  extraFields     Json?

  @@index([productId])
  @@index([documentId])
  @@index([companyId])
}

model Establishment {
  id              String     @id @default(cuid())
  name            String     @default("")
  defaultCurrency String?    @default("EUR")
  logo            File?      @relation("Establishment_logo", fields: [logoId], references: [id])
  logoId          String?    @map("logo")
  phone           String     @default("")
  phone2          String     @default("")
  taxID           String     @default("")
  bankAccount1    String     @default("")
  bankAccount2    String     @default("")
  bankAccount3    String     @default("")
  shelves         Shelf[]    @relation("Shelf_establishment")
  users           User[]     @relation("User_establishment")
  address         Address?   @relation("Establishment_address", fields: [addressId], references: [id])
  addressId       String?    @map("address")
  documents       Document[] @relation("Document_establishment")
  company         Company?   @relation("Establishment_company", fields: [companyId], references: [id])
  companyId       String?    @map("company")
  featureFlags    Json?      @default("{\"documents\":true,\"stock\":true,\"drive\":true}")
  extraFields     Json?

  @@index([logoId])
  @@index([addressId])
  @@index([companyId])
}

model File {
  id                            String               @id @default(cuid())
  name                          String               @default("")
  url                           String               @default("")
  company                       Company?             @relation("File_company", fields: [companyId], references: [id])
  companyId                     String?              @map("company")
  extraFields                   Json?                @default("{\"isCover\":false,\"order\":1}")
  from_Accountancy_logo         Accountancy[]        @relation("Accountancy_logo")
  from_Company_logo             Company[]            @relation("Company_logo")
  from_Document_files           Document[]           @relation("Document_files")
  from_Establishment_logo       Establishment[]      @relation("Establishment_logo")
  from_Material_files           Material[]           @relation("Material_files")
  from_Operation_files          Operation[]          @relation("Operation_files")
  from_Tag_image                Tag[]                @relation("Tag_image")
  from_WorkOrderOperation_files WorkOrderOperation[] @relation("WorkOrderOperation_files")

  @@index([companyId])
}

model Material {
  id                 String              @id @default(cuid())
  name               String              @default("")
  components         AssemblyComponent[] @relation("AssemblyComponent_assembly")
  assemblyComponents AssemblyComponent[] @relation("AssemblyComponent_material")
  description        String              @default("")
  price              Decimal             @postgresql.Decimal(18, 4)
  status             String              @default("active")
  files              File[]              @relation("Material_files")
  workOrders         WorkOrder[]         @relation("Material_workOrders")
  code               String              @default("")
  ean                String              @default("")
  tax                Decimal             @default("21") @postgresql.Decimal(18, 4)
  brand              Brand?              @relation("Material_brand", fields: [brandId], references: [id])
  brandId            String?             @map("brand")
  suppliers          Supplier[]          @relation("Material_suppliers")
  pricedBy           String              @default("amount")
  type               String              @default("product")
  operations         Operation[]         @relation("Operation_material")
  stockMovements     StockMovement[]     @relation("StockMovement_material")
  documentProducts   DocumentProduct[]   @relation("DocumentProduct_product")
  productCollections ProductCollection[] @relation("Material_productCollections")
  stock              ShelfStock[]        @relation("ShelfStock_material")
  earliestExpiration DateTime?
  company            Company?            @relation("Material_company", fields: [companyId], references: [id])
  companyId          String?             @map("company")
  tags               Tag[]               @relation("Material_tags")
  extraFields        Json?

  @@index([brandId])
  @@index([companyId])
}

model Note {
  id          String   @id @default(cuid())
  note        String   @default("")
  creator     User?    @relation("Note_creator", fields: [creatorId], references: [id])
  creatorId   String?  @map("creator")
  company     Company? @relation("Note_company", fields: [companyId], references: [id])
  companyId   String?  @map("company")
  extraFields Json?

  @@index([creatorId])
  @@index([companyId])
}

model Notification {
  id          String    @id @default(cuid())
  date        DateTime? @default(now())
  message     String    @default("")
  link        String    @default("")
  handled     Boolean   @default(false)
  notifyRoles Json      @default("[]")
  company     Company?  @relation("Notification_company", fields: [companyId], references: [id])
  companyId   String?   @map("company")

  @@index([companyId])
}

model Operation {
  id                  String               @id @default(cuid())
  name                String               @default("")
  files               File[]               @relation("Operation_files")
  material            Material?            @relation("Operation_material", fields: [materialId], references: [id])
  materialId          String?              @map("material")
  workOrderOperations WorkOrderOperation[] @relation("WorkOrderOperation_operation")
  user                User?                @relation("Operation_user", fields: [userId], references: [id])
  userId              String?              @map("user")
  cost                Decimal?             @postgresql.Decimal(18, 4)
  value               Decimal              @postgresql.Decimal(18, 4)
  duration            Int?
  description         String               @default("")
  company             Company?             @relation("Operation_company", fields: [companyId], references: [id])
  companyId           String?              @map("company")
  extraFields         Json?

  @@index([materialId])
  @@index([userId])
  @@index([companyId])
}

model Payment {
  id          String     @id @default(cuid())
  value       Decimal    @postgresql.Decimal(18, 4)
  document    Document[] @relation("Document_payments")
  isDeleted   Boolean    @default(false)
  isVerified  Boolean    @default(false)
  creator     User?      @relation("Payment_creator", fields: [creatorId], references: [id])
  creatorId   String?    @map("creator")
  reference   String     @default("")
  type        String     @default("cash")
  timestamp   DateTime?  @default(now())
  company     Company?   @relation("Payment_company", fields: [companyId], references: [id])
  companyId   String?    @map("company")
  extraFields Json?

  @@index([creatorId])
  @@index([companyId])
}

model ProductCollection {
  id          String     @id @default(cuid())
  name        String     @default("")
  products    Material[] @relation("Material_productCollections")
  company     Company?   @relation("ProductCollection_company", fields: [companyId], references: [id])
  companyId   String?    @map("company")
  extraFields Json?

  @@index([companyId])
}

model Shelf {
  id              String          @id @default(cuid())
  x               String          @default("")
  y               String          @default("")
  z               String          @default("")
  contents        ShelfStock[]    @relation("ShelfStock_shelf")
  establishment   Establishment?  @relation("Shelf_establishment", fields: [establishmentId], references: [id])
  establishmentId String?         @map("establishment")
  stockMovements  StockMovement[] @relation("StockMovement_shelf")
  company         Company?        @relation("Shelf_company", fields: [companyId], references: [id])
  companyId       String?         @map("company")
  extraFields     Json?

  @@index([establishmentId])
  @@index([companyId])
}

model ShelfStock {
  id             String          @id @default(cuid())
  shelf          Shelf?          @relation("ShelfStock_shelf", fields: [shelfId], references: [id])
  shelfId        String?         @map("shelf")
  material       Material?       @relation("ShelfStock_material", fields: [materialId], references: [id])
  materialId     String?         @map("material")
  stockMovements StockMovement[] @relation("StockMovement_shelfStock")
  expiration     DateTime?
  currentStock   Decimal?        @postgresql.Decimal(18, 4)
  company        Company?        @relation("ShelfStock_company", fields: [companyId], references: [id])
  companyId      String?         @map("company")

  @@index([shelfId])
  @@index([materialId])
  @@index([companyId])
}

model SoftwareVersion {
  id            Int       @id
  version       Int       @default(1)
  mobileVersion Int       @default(1)
  iosLink       String    @default("")
  androidLink   String    @default("")
  webLink       String    @default("")
  windowsLink   String    @default("")
  macLink       String    @default("")
  date          DateTime? @default(now())
}

model StockMovement {
  id              String           @id @default(cuid())
  material        Material?        @relation("StockMovement_material", fields: [materialId], references: [id])
  materialId      String?          @map("material")
  amount          Decimal          @postgresql.Decimal(18, 4)
  movementType    String           @default("in")
  shelfStock      ShelfStock?      @relation("StockMovement_shelfStock", fields: [shelfStockId], references: [id])
  shelfStockId    String?          @map("shelfStock")
  expiration      DateTime?
  documentProduct DocumentProduct? @relation("DocumentProduct_stockMovement")
  note            String           @default("")
  customer        User?            @relation("StockMovement_customer", fields: [customerId], references: [id])
  customerId      String?          @map("customer")
  date            DateTime?        @default(now())
  shelf           Shelf?           @relation("StockMovement_shelf", fields: [shelfId], references: [id])
  shelfId         String?          @map("shelf")
  createdAt       DateTime?        @default(now())
  company         Company?         @relation("StockMovement_company", fields: [companyId], references: [id])
  companyId       String?          @map("company")
  extraFields     Json?

  @@index([materialId])
  @@index([shelfStockId])
  @@index([customerId])
  @@index([shelfId])
  @@index([companyId])
}

model Supplier {
  id          String     @id @default(cuid())
  name        String     @default("")
  materials   Material[] @relation("Material_suppliers")
  documents   Document[] @relation("Document_supplier")
  company     Company?   @relation("Supplier_company", fields: [companyId], references: [id])
  companyId   String?    @map("company")
  address     Address?   @relation("Supplier_address", fields: [addressId], references: [id])
  addressId   String?    @map("address")
  taxId       String     @default("")
  contactMail String     @default("")
  orderMail   String     @default("")
  phone       String     @default("")
  orderTime   Int?
  extraFields Json?

  @@index([companyId])
  @@index([addressId])
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @default("")
  materials   Material[] @relation("Material_tags")
  parentTag   Tag?       @relation("Tag_parentTag", fields: [parentTagId], references: [id])
  parentTagId String?    @map("parentTag")
  childTags   Tag[]      @relation("Tag_parentTag")
  type        String     @default("category")
  image       File?      @relation("Tag_image", fields: [imageId], references: [id])
  imageId     String?    @map("image")
  company     Company?   @relation("Tag_company", fields: [companyId], references: [id])
  companyId   String?    @map("company")
  extraFields Json?

  @@index([parentTagId])
  @@index([imageId])
  @@index([companyId])
}

model User {
  id                String          @id @default(cuid())
  name              String          @default("")
  email             String          @unique @default("")
  isBlocked         Boolean         @default(false)
  phone             String          @default("")
  role              String          @default("customer")
  permissions       Json            @default("[]")
  ssid              String          @default("")
  password          String
  operations        Operation[]     @relation("Operation_user")
  notes             Note[]          @relation("Note_creator")
  documents         Document[]      @relation("Document_creator")
  customerDocuments Document[]      @relation("Document_customer")
  customerMovements StockMovement[] @relation("StockMovement_customer")
  preferredLanguage String          @default("")
  customerCompany   String          @default("")
  firstName         String          @default("")
  lastName          String          @default("")
  customerTaxNumber String          @default("")
  customerTaxCenter String          @default("")
  payments          Payment[]       @relation("Payment_creator")
  customerAddresses Address[]       @relation("Address_customer")
  workOrders        WorkOrder[]     @relation("WorkOrder_creator")
  establishment     Establishment?  @relation("User_establishment", fields: [establishmentId], references: [id])
  establishmentId   String?         @map("establishment")
  accountancy       Accountancy?    @relation("User_accountancy", fields: [accountancyId], references: [id])
  accountancyId     String?         @map("accountancy")
  ownedCompany      Company?        @relation("Company_owner")
  company           Company?        @relation("User_company", fields: [companyId], references: [id])
  companyId         String?         @map("company")
  extraFields       Json?

  @@index([role])
  @@index([establishmentId])
  @@index([accountancyId])
  @@index([companyId])
}

model WorkOrder {
  id           String               @id @default(cuid())
  number       String               @default("")
  materials    Material[]           @relation("Material_workOrders")
  operations   WorkOrderOperation[] @relation("WorkOrderOperation_workOrder")
  datePlanned  DateTime?
  dateStarted  DateTime?
  dateFinished DateTime?
  creator      User?                @relation("WorkOrder_creator", fields: [creatorId], references: [id])
  creatorId    String?              @map("creator")
  company      Company?             @relation("WorkOrder_company", fields: [companyId], references: [id])
  companyId    String?              @map("company")
  extraFields  Json?

  @@index([creatorId])
  @@index([companyId])
}

model WorkOrderOperation {
  id          String     @id @default(cuid())
  files       File[]     @relation("WorkOrderOperation_files")
  startedAt   DateTime?
  finishedAt  DateTime?
  name        String     @default("")
  description String     @default("")
  value       Decimal    @postgresql.Decimal(18, 4)
  reduction   Decimal?   @default("0") @postgresql.Decimal(18, 4)
  amount      Decimal    @postgresql.Decimal(18, 4)
  wastage     Decimal?   @default("0") @postgresql.Decimal(18, 4)
  workOrder   WorkOrder? @relation("WorkOrderOperation_workOrder", fields: [workOrderId], references: [id])
  workOrderId String?    @map("workOrder")
  operation   Operation? @relation("WorkOrderOperation_operation", fields: [operationId], references: [id])
  operationId String?    @map("operation")
  company     Company?   @relation("WorkOrderOperation_company", fields: [companyId], references: [id])
  companyId   String?    @map("company")
  extraFields Json?

  @@index([workOrderId])
  @@index([operationId])
  @@index([companyId])
}
